// 상속의 진정한 의미 : 재사용성
// <특성>
// 1. 단일 상속 (계층적 상속은 가능함)
// 2. extends (확장) cf. C#은 , 쓴다.
// 3. interface는 다중 상속 가능!

// 상속 구현의 Point : 자원들의 공통 분모 뽑는 연습하기!

// 문제상황. class가 여러 개 있는 경우
// 1. 클래스 간의 관계를 파악한다. => 상속 or 포함
//		... is a ~ : ...은 ~이다. => 상속
//		... has a ~ : ...은 ~을 가지고 있다. => 포함
//		ex1. 원(구체화된 자원)은 도형(추상자원)이다. => 상속
//		ex2. 원은 점이다? (X)
// 		ex3. 원은 점을 가지고 있다. => 포함

// ex. 삼각형, 원, 사각형 구현할 때! 먼저 세부 요소를 나열해보는 것이 편함!
// 		그러고 나서 공통점을 뽑는다.
// 		공통적인 상황 > 색상, 그리다 > 도형
// 		점(point) > 클래스
// 		class Point {}
// 		class Circle { Point p; }
// 		이것이 어려운 이유 : 한 클래스가 하나만 상속하고 포함하지는 않음 여러개 가짐

// 상속 : 일반화 > 구체화
// 상속 : 공통 > 특수화

// 일반화(공통) : Shape, Point
// 구체화(특수화) : Circle(반지름), Triangle(점이 3개) ...

public class Ex0113_Inherit {

}
